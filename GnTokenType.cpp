// This file was automatically generated by EbnfStudio; don't modify it!
#include "GnTokenType.h"

namespace Gn {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Bang: return "!";
			case Tok_BangEq: return "!=";
			case Tok_Hash: return "#";
			case Tok_2Amp: return "&&";
			case Tok_Lpar: return "(";
			case Tok_Rpar: return ")";
			case Tok_Plus: return "+";
			case Tok_PlusEq: return "+=";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_MinusEq: return "-=";
			case Tok_Dot: return ".";
			case Tok_Lt: return "<";
			case Tok_Leq: return "<=";
			case Tok_Eq: return "=";
			case Tok_2Eq: return "==";
			case Tok_Gt: return ">";
			case Tok_Geq: return ">=";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Lbrace: return "{";
			case Tok_2Bar: return "||";
			case Tok_Rbrace: return "}";
			case Tok_else: return "else";
			case Tok_false: return "false";
			case Tok_if: return "if";
			case Tok_true: return "true";
			case Tok_identifier: return "identifier";
			case Tok_integer: return "integer";
			case Tok_string: return "string";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Bang: return "Tok_Bang";
			case Tok_BangEq: return "Tok_BangEq";
			case Tok_Hash: return "Tok_Hash";
			case Tok_2Amp: return "Tok_2Amp";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Plus: return "Tok_Plus";
			case Tok_PlusEq: return "Tok_PlusEq";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_MinusEq: return "Tok_MinusEq";
			case Tok_Dot: return "Tok_Dot";
			case Tok_Lt: return "Tok_Lt";
			case Tok_Leq: return "Tok_Leq";
			case Tok_Eq: return "Tok_Eq";
			case Tok_2Eq: return "Tok_2Eq";
			case Tok_Gt: return "Tok_Gt";
			case Tok_Geq: return "Tok_Geq";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Lbrace: return "Tok_Lbrace";
			case Tok_2Bar: return "Tok_2Bar";
			case Tok_Rbrace: return "Tok_Rbrace";
			case Tok_else: return "Tok_else";
			case Tok_false: return "Tok_false";
			case Tok_if: return "Tok_if";
			case Tok_true: return "Tok_true";
			case Tok_identifier: return "Tok_identifier";
			case Tok_integer: return "Tok_integer";
			case Tok_string: return "Tok_string";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '!':
			if( at(str,i+1) == '=' ){
				res = Tok_BangEq; i += 2;
			} else {
				res = Tok_Bang; i += 1;
			}
			break;
		case '#':
			res = Tok_Hash; i += 1;
			break;
		case '&':
			if( at(str,i+1) == '&' ){
				res = Tok_2Amp; i += 2;
			}
			break;
		case '(':
			res = Tok_Lpar; i += 1;
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '+':
			if( at(str,i+1) == '=' ){
				res = Tok_PlusEq; i += 2;
			} else {
				res = Tok_Plus; i += 1;
			}
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			if( at(str,i+1) == '=' ){
				res = Tok_MinusEq; i += 2;
			} else {
				res = Tok_Minus; i += 1;
			}
			break;
		case '.':
			res = Tok_Dot; i += 1;
			break;
		case '<':
			if( at(str,i+1) == '=' ){
				res = Tok_Leq; i += 2;
			} else {
				res = Tok_Lt; i += 1;
			}
			break;
		case '=':
			if( at(str,i+1) == '=' ){
				res = Tok_2Eq; i += 2;
			} else {
				res = Tok_Eq; i += 1;
			}
			break;
		case '>':
			if( at(str,i+1) == '=' ){
				res = Tok_Geq; i += 2;
			} else {
				res = Tok_Gt; i += 1;
			}
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case 'e':
			if( at(str,i+1) == 'l' ){
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_else; i += 4;
					}
				}
			}
			break;
		case 'f':
			if( at(str,i+1) == 'a' ){
				if( at(str,i+2) == 'l' ){
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_false; i += 5;
						}
					}
				}
			}
			break;
		case 'i':
			if( at(str,i+1) == 'f' ){
				res = Tok_if; i += 2;
			}
			break;
		case 't':
			if( at(str,i+1) == 'r' ){
				if( at(str,i+2) == 'u' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_true; i += 4;
					}
				}
			}
			break;
		case '{':
			res = Tok_Lbrace; i += 1;
			break;
		case '|':
			if( at(str,i+1) == '|' ){
				res = Tok_2Bar; i += 2;
			}
			break;
		case '}':
			res = Tok_Rbrace; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
