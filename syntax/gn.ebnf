// * Copyright 2019 Rochus Keller <mailto:me@rochus-keller.ch>
// *
// * This file is part of the GN parser library.
// *
// * The following is the license that applies to this copy of the
// * library. For a license to use the library under conditions
// * other than those described here, please email to me@rochus-keller.ch.
// *
// * GNU General Public License Usage
// * This file may be used under the terms of the GNU General Public
// * License (GPL) versions 2.0 or 3.0 as published by the Free Software
// * Foundation and appearing in the file LICENSE.GPL included in
// * the packaging of this file. Please review the following information
// * to ensure GNU General Public Licensing requirements will be met:
// * http://www.fsf.org/licensing/licenses/info/GPLv2.html and
// * http://www.gnu.org/copyleft/gpl.html.

File ::= StatementList 

Statement     ::= 
	\LL:2\ Call
	| Assignment
	| Condition 

LValue        ::= 
	// identifier | ArrayAccess | ScopeAccess 
	identifier [ '[' Expr ']' | '.' identifier   ]

Assignment    ::= 
	LValue AssignOp Expr

Call          ::= identifier '(' [ ExprList ] ')' [ Block ] 

Condition     ::= 'if' '(' Expr ')' Block
	[ 'else' ( Condition | Block ) ] 

Block         ::= '{' StatementList '}' 

StatementList ::= { Statement } 

ArrayAccess ::= identifier '[' Expr ']' 

ScopeAccess ::= identifier '.' identifier 

Expr        ::= 
	UnaryExpr [ Expr_nlr_ ]
	// lr removed | Expr BinaryOp Expr 

Expr_nlr_ ::= BinaryOp Expr [ Expr_nlr_ ]

UnaryExpr   ::= PrimaryExpr | UnaryOp UnaryExpr

PrimaryExpr ::= 
	\LL:2\ ArrayAccess
	| \LL:2\ ScopeAccess
	| \LL:2\ Call
	| identifier 
	| signed_
	| string
	| Scope_
	| true
	| false
	| '(' Expr ')'
	| List_

signed_ ::= [ '-' ] integer 

List_ ::= 
	// '[' [ ExprList [ ',' ] ] ']' 
	'[' { Expr [ ',' ] } ']' 

Scope_ ::= Block

ExprList    ::= Expr { ',' Expr } 

AssignOp ::= '=' | '+=' | '-=' 
UnaryOp  ::= '!' 
BinaryOp ::= '+' | '-'                  // highest priority
	| '<' | '<=' | '>' | '>='
	| '==' | '!='
	| '&&'
	| '||'                    // lowest priority

///// Lexer productions
identifier ::=
integer ::=
string ::=
Comment ::= 

comment_- ::= '#' 

///// Pragmas
%namespace ::= 'Gn'
%module ::= 'GnTools'
%suppress ::= ','